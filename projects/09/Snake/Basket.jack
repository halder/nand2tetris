// File name: projects/09/Basket.jack

/** Basket holds and takes care of all apple-related functionality.
    Apples function as the snake's food and are required to score points in the game.

    TODO: Fix some generated apples spawning inside the snake's body. Could be either of:
        - generated apple is equivalent to an existing apple -> checkValidity does not work as intended
        - generated apple is equivalent to an existing snake bodypart -> checkValidity does not work as intended
        - generated apple is equivalent to the eaten apple -> not sure
*/

class Basket {
    field int slot;     // index pointing to currently relevant basket slot
    field Array ax, ay; // arrays of apple X and Y coordinates


    constructor Basket new() {
        let slot = 0;

        let ax = Array.new(3);
        let ay = Array.new(3);

        return this;
    }


    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }


    method Array applesX() { return ax; }
    method Array applesY() { return ay; }


    method void initiate(Array bx, Array by, int len) {
        while (slot < 3) {
            do fill(bx, by, len);
            let slot = slot + 1;
        }

        let slot = slot - 1;
        
        return;
    }


    method void remove(int index) {
        let slot = index;
        return;
    }


    method void fill(Array bx, Array by, int len) {
        var Array apple;

        let apple = generateApple(bx, by, len);

        let ax[slot] = apple[0];
        let ay[slot] = apple[1];

        return;
    }


    method Array generateApple(Array bx, Array by, int len) {
        var int x, y;
        var Array apple;
        var boolean valid;

        let valid = true;
        let apple = Array.new(2);

        let x = 6 + (25 * LCGRandom.randRange(1, 19));
        let y = (3 + 25) + (25 * LCGRandom.randRange(1, 8)); // 3 + SIZE

        let apple[0] = x;
        let apple[1] = y;

        let valid = checkValidity(x, y, bx, by, len);   // check vs snake parts

        if (~valid) {
            do generateApple(bx, by, len);
        }

        return apple;
    }


    method boolean checkValidity(int x, int y, Array arrX, Array arrY, int len) {
        var int i;
        var boolean valid;

        let valid = true;

        let i = 0;
        while (i < len) {
            if ((arrX[i] = x) & (arrY[i] = y)) { let valid = false; }
            let i = i + 1;
        }

        // check apple position vs. other apples
        let i = 0;
        while (i < 3) {
            if ((ax[i] = x) & (ay[i] = y)) { let valid = false; }
            let i = i + 1;
        }

        return valid;
    }
}