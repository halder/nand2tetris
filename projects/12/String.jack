// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length, max;
    field Array elements;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }

        if (maxLength = 0) {
            let length = 0;
            let max = 0;
        } else {
            let elements = Array.new(maxLength);
            let length = 0;
            let max = maxLength;
        }

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~(j < length)) {
            do Sys.error(15);
        }

        return elements[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (~(j < length)) {
            do Sys.error(16);
        }

        let elements[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length > max) {
            do Sys.error(17);
        }

        let elements[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(18);
        }

        let elements[length-1] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean neg;
        var int i, v; 

        if (elements[0] = 45) {
            let neg = true;
            let i = 1;
        } else {
            let neg = false;
            let i = 0;
        }

        let v = 0;
        while (i < length) {
            let v = (10 * v) + (elements[i] - 48);
            let i = i + 1;
        }

        if (neg) {
            return -v;
        } else {
            return v;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;

        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }

        do int2StrHelper(val);
        return;
    }

    /** Internal recursive helper for setInt. */
    method void int2StrHelper(int n) {
        var int remainder;

        if (n < 10) {
            do appendChar(n + 48);
        } else {
            let remainder = n / 10;
            do int2StrHelper(remainder);
            do appendChar((n - (remainder * 10)) + 48);
        }

        return;
    }
    
    /** Non-recursive version of setInt */
    method void setIntNonRec(int val) {
        var int i, j, lastDigit, tempI, tempJ;
        
        let length = 0;

        if (val < 0) {
            do appendChar(45);
            let val = -val;
            let i = 1;
            let j = 1;
        } else {
            let i = 0;
            let j = 0;
        }

        if (val < 10) {
            do appendChar(val + 48);
            return;
            
        } else {
            while (val > 9) {
                let lastDigit = val - (10 * (val / 10));
                do appendChar(lastDigit + 48);
                let val = val / 10;
                let i = i + 1;
            }

            do appendChar(val + 48);
            
            while (i > j) {
                let tempI = elements[i];
                let tempJ = elements[j];
                let elements[i] = tempJ;
                let elements[j] = tempI;

                let i = i - 1;
                let j = j + 1;
            }
            return;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
